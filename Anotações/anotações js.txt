Repositórios Públicos
github.com/gustavoguanabara
gustavoguanabara.github.io

Anotações de HTML

N = Número
P = Palavra
V = Variavel/Vetor(Array)
F = Função
I = Id
C = Classe
L = Link (de video, imagem etc)
LA = Local do arquivo (dentro do pc)
X = Qualquer valor, seja número, string, etc

Para o JavaScript, os dias da semana são os seguites:
0 = Domingo
1 = Segunda
2 = Terça
3 = Quarta
4 = Quinta
5 = Sexta
6 = Sábado

var = cria uma variavel
Ex: var P = X  (saida: cria a variavel "P" que armazena um valor X)

let = cria uma variavel
Ex: let P = X  (saida: cria a variavel "P" que armazena um valor X)

Identificadores (valor de uma variavel) não podem começar com números e não podem conter
espaços e nem comandos

Diferença entre vai, let e const:
var = cria uma variavel que pode ser acessada em qualquer escopo do código (exeto se estiver
dentro de uma função);
let = cria uma variavel que pode ser acessada apenas pelo mesmo escopo ou superior;
const = cria uma variavel com um valor imutavel (sim, uma variavel não variavel)

"use strict" = ativa o modo estrito/restrito
Ex: "use strict"  (saida: o modo estrito é ativado)

push = adiciona um valor a um Array
Ex: V.push('P')  (saida: irá adicionar "P" a ultima posição de um Array)

length = diz quantas casas tem o Array
Ex: console.log(V.length)  (saida: diz quantas casas tem em "V")

sort = coloca os elementos em ordem crescente
Ex: var V = [1, 3, 2, 4]
    consolve.log(V.sort())
(saida: 1, 2, 3, 4)

typeof = mostra o tipo de um identificador
Ex: typeof('V')  (mostra de que tipo é a variavel "V")

.length = diz quantos caracteres uma string tem
Ex: V.lenght  (saida: número de caracteres na variavel)

.toUpperCase() = coloca em caixa-alta (CAPS-LOCK)
Ex: P.toUpperCase()  (saida: "P" (em maiusculo))

.toLowerCase() = coloca em minúsculas
Ex: P.toLowerCase()  (saida: "P" (em minúsculo))

window.alert = coloca um alerta quando site é aberto
Ex:  window.alert('P')  (saida: irá aparecer "P" quando carregar o site)

window.confirm = pede uma confirmação
Ex: window.confirm('P')  (saida: irá aparecer "P" em uma janela, você poderá concordar
                           (OK) ou discordar (cancelar)

window.prompt = faz uma pergunta com resposta inserivel/livre
Ex: window.prompt('P')  (saida: irá dizer "P", e você deverá inserir uma resposta)

console.log = mostra algo na tela (do node.js, não do navegador)
Ex: console.log('P')  (saida: no node.js aparecerá "P")

return = retorna algo
Ex: return 'P'  (saida: irá retornar "P" (não imprimir, só retornar))
(após um return, todo o bloco de comando é parado (como o break faz))

document.write = escreve algo
Ex: document.write('P')  (saida: escreve "P")

document.writeln = escreve algo e pula uma linha
Ex: document.writeln('P')  (saida: escreve "P" e pula para a linha de baixo)

createElement = cria uma tag
Ex: var V = document.createElement('img')  (saida: irá criar uma tag de imagem)

setAttribute = define um atributo
Ex: img.setAttribute('id', 'foto')  (saida: a tag img terá o id "foto")

Number.parseInt = tranforma um valor em um número (inteiro)
Ex: Number.parseInt('V.value')  (trata "N" como um número, ou invez de string)

Number.parseFloat = tranforma um valor em um número (quebrado)
Ex: Number.parseFloat('V.value')  (saida: trata "N" como um número quebrado, ou invez de
                                   string)

Number = tranforma um valor em número (qualquer tipo)
Ex: Number(V.value)  (saida: trata o valor presents na variavel "V" como númeors)

String = tranforma um valor em string
Ex: String.('P/N')  (saida: "P/N" será uma string)

String = tranforma um valor em string
Ex: String.('P/N')  (saida: "P/N" será uma string)

toFixed() = vai fazer um numero terminar em X casas decimais
Ex: 150.toFixed(2)  (saida: "150.00" (o número pode ser modificado))

get = serve para selecionar elementos pela "classe"
Ex: var P = document.getElementsByTagName('p')[0]  (saida: a variavel "P" terá o
                                                    primeiro parágrafo do texto como
						    conteúdo)

querySelector = seleciona um id/class de forma parecida com css (apenas seleciona o primeiro valor encontrado
Ex: var P = document.querySelector('p#msg')  (saida: irá selecionar o primeiro valor com o id "msg")

querySelectorAll = igual com o querySelector normal, porém seleciona todos o valor encontrados
Ex: Ex: var P = document.querySelector('p.msg')  (saida: irá selecionar todos os valores com a classe "msg")

innerText = serve para obter ou definir um texto
Ex: var V = document.getElementsById('I')
    V.innerText = 'P' (saida: irá mudar o TEXTO dentro de uma variavel para "P")

createElement = cria um elemento
Ex: document.createElement('option')  (saida: irá criar uma opção)

innerHTML = serve para obter ou definir um HTML (texto e tags)
Ex: var V = document.getElementsById('I')
    V.innerHTML = 'P <br>' (saida: irá mudar o HTML dentro de uma variavel para "P" e uma
                            quebra de linha)

style = serve para aderir uma tag de css em algo
Ex: V.style.color = 'black'  (saida: o que está dentro de "V" (se aparecer na tela) será
                                                               preto)

img.src = faz com que você consiga mudar a foto em um lugar
Ex: img.scr = "L/LA"  (saida: a foto será a mesma do L/LA)

addEventListener = faz com que a maquina "preste atenção" caso certos eventos ocorram
Ex: V.addEventListener('click', P)  (toda ver que a variavel "V" for clicada, irá disparar
                                     o evento "clicar")

function = cria uma função
Ex: <div onclick="clicou()">
       P
    </div>
    <script>
      function clicou() {
      console.log('P')
      }
    </script>
(saida: quando clicar na divisória, irá disparar o evento "clicou", e então a função irá
enviar "P")

COMO FAZER UMA FUNCITIONS COM VALORES ILIMITADOS (utilizando spread)
Primeira forma (padrão):

function somar(...valores) {
    var V1 = 0
    for(V2 of valores) {
        V1 += V2
    }
    return V1
}

Segunda forma (funções arrow):

const somar = (...valores) => {
        var V1 =  0
        for (V2 of valores) {
            V1 += V2
        }
        return V1}
(Irá somar todos os números inseridos em "somar()"

yield = pausa a execução de uma função, retorna um valor. Pode receber um valor diferente quando
        a execução é retomada.
Ex: function* gerador() {
    yield "P1"
    yield "P2"
}

const V = gerador();

console.log(V.next().value)
console.log(V.next().value)
(saída: irá retornar "P1" da primeira vez, e da segunda "P2")

Propriedades das funções:
Funções podem ser dentro de uma variavel (arrows ou anonimas), ou podem ser apenas parte do código. É
possivel preencher os parentesês no nome da variavel para fazer calculos, colocar uma função dentro da
outra (ou só chamando ela), usar funções para ativar eventos no DOM, entre outros.

this = serve para criar uma variavel do mesmo nome de um parâmetro em um função
Ex: function F(V1, V2) {
       this.V! = V!
       this.V2 = V2
       console.log(nome)
       console.log(nota)
}
(saída: irá identificar que, V1 (parâmetro), é diferente de V1 (variavel), e o mesmo para V2)

if = faz o papel de "se" em uma condição
Ex: if (2>=3) {
       console.log(true)
}
(saida: caso dois seja maior ou igual a três, irá enviar "true" ao node.js)

else = faz o papel de "se não" em uma condição
Ex: if (2>=3) {
       console.log(true)
    }
    else {
       console.log(false)
    }	
(saida: caso dois seja maior ou igual a três, irá enviar "true" ao node.js, caso
contrário, enviará "false")

break: para de rodar qualquer interação (if, while, etc)
Ex: while (V1 < V2) {
    console.log(`Olá, mundo! [${V1}]`)
    if (V1 >= 10) {
        break
    }
    V1++
}
(saída: irá imprimir "Olá mundo", até que o valor seja 10. Irá parar o código se chegar em 10)

cotinue: para de rodar a iteração atual
Ex: for(var V!=0; V1 < V2; V1++) {
    console.log(`Olá, mundo! [${V!}]`)
    if(V1%2==0) {
        continue
    }
    V3++
}
(saída: se o valor for divisivel por dois, complementará o valor de V3 em 1)

switch = envia um resultado correspondente ao valor apresentado
Ex: switch (V) {
    case 1:
            console.log(`P (1)`)
            break
        case 2:
            console.log(`P (2)`)
            break
        case 3:
            console.log(`P (3)`)
            break
        default:
            console.log(`P (4)`)
            break
    }
(saída: caso o valor de V seja 1, irá imprimir "P (1)", caso seja 2, imprimirá "P (2)".
E assim por diante)

while = cria uma repetição
Ex: while (3 > 2) { console.log('P')}  (saida: enquanto 3 for maior do que 2, "P" será
                                        enviado ao console)

do while = inverte a ordem do while
Ex: do {
        console.log('P')
    } while (3 > 2)
(saida: enquanto 3 for maior do que 2, "P" será enviado ao console)

for = é parecido com while, porém ou invez de apenas um teste logico, for leva uma
inicialização (variavel), um teste lógico um incremento (soma)
Ex: for (var V = 5; V!=0; V--) {
       console.log('P')
    }
(Irá enviar "P" para o console, após isso irá adicionar somar 1 a variavel V até que
ela seja igual a zero)

COMO EXIBIR OS VALORES DE UM ARRAY EM UM LOOP (for)
Forma 1 (for padrão):
Ex: var V1 = [10, 20, 30, 40, 50]
for(var V2 = 0; V2 < V1.length; V2++ {
    console.log(`V1[V2]`)
}
(saída: irá imprimir "10, 20, 30, 40, 50")

Forma 2 (for in):
Ex: var num = [10, 20, 30, 40, 50]
    for (i in num) {
       console.log(num[i])
    }
(saída: irá imprimir "10, 20, 30, 40, 50")

Forma 3 (for of):
Ex: var num = [10, 20, 30, 40, 50]
    for (i of num) {
       console.log(i)
    }
(saída: irá imprimir "10, 20, 30, 40, 50")

focus() = faz com você foque em algum elemento (como se tivesse o selecionado)
Ex: V.focus()  (saida: irá focar no elemento/variavel V)

EMOJIS
\u{*codigo de emoji*}
(saida: emoji)
Para descobrir o código de um emoji, vá em sites como emojipedia e busque pelo código
na ficha tecnica (apenas depois do "U+")

COMO MOSTRAR A HORA ATUAL
var V = new Date()
var V2 = agora.getHours()
(saida: dentro da variavel V2 estará o horário atual)
(é possivel pegar dias ou outra medida de tempo)

COMO MOSTRAR MOEDAS
N.toLocaleString('pt-BR', {style: 'currency', currency: "BRL"})
(saida: R$ N)
(o valor "BRL" pode ser trocado dependendo da moeda)

// = um comentário de apenas uma lista
Ex: //P  (saida: nenhuma)

/* e */ = um comentário de várias uma lista
Ex: /*
      P
      P
      P
    */
(saida: nenhuma)

VETORES/ARRAY
var V = [1, 2, 3, 4]
console.log(`Numeros: ${V}`)
(saida: Numeros: 1, 2, 3, 4)
(você pode acessar/modificar elementos selecionados em vetores colocando o nome
da variavel, colocando o índice entre concetes e o novo valor)

COMANDOS COM VETORES

push = adiciona um valor a um Array
Ex: V.push('P')  (saida: irá adicionar "P" a ultima posição de um Array)

length = diz quantas casas tem o Array
Ex: console.log(V.length)  (saida: diz quantas casas tem em "V")

sort = coloca os elementos em ordem crescente
Ex: var V = [1, 3, 2, 4]
    consolve.log(V.sort())
(saida: 1, 2, 3, 4)

index.Of = Procura o índice pelo valor
Ex:  var V = [7, 8, 9, 10]
     console.log(`O valor 8 tem o índice ${V.indexOf(8)}`)
(saida: O valor 8 tem o índice 1)

map = permite interagir com o array usando os elementos e os índices
Ex: V = [P1, P2, P3, P4]
    V.map((X1, X2) => {
       return `${X1} - ${X2}`
}(
(saída: irá exibir o(s) elemento(s) dentro do array, travessão, o índice do(s) valor(es))
(map funciona com outros grupos de elementos também)

OBJETOS/OBJETCS
Ex: var pessoa = {nome:'João',idade:'14'}  (saida: cria um objeto com os valores
"nome" e "idade" que valem "João" e "14")
(objetos são como arrays, porém seus índices não estão limitados a números. Uma variavel
em um objeto pode ter uma função como valor)